version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - confluent

  broker:
    image: confluentinc/cp-server:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '9092:9092'
      - '9101:9101'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - confluent
    healthcheck:
      test: ['CMD', 'bash', '-c', 'nc -z localhost 9092']
      interval: 10s
      timeout: 5s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - confluent
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8081']
      interval: 30s
      timeout: 10s
      retries: 5

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - '9021:9021'
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLIENT_METRICS_ENABLE: 'false'
      PORT: 9021
    networks:
      - confluent
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9021']
      interval: 30s
      timeout: 10s
      retries: 5

  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - '9042:9042'
    volumes:
      - ./cassandra:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ['CMD', 'bash', '-c', "cqlsh -e 'describe keyspaces' || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - confluent

  cassandra-init:
    image: cassandra:4.1
    container_name: cassandra-init
    depends_on:
      cassandra:
        condition: service_healthy
    volumes:
      - ./cassandra:/opt/cassandra-init:ro
    entrypoint: ["/bin/bash", "/opt/cassandra-init/init_cassandra.sh"]
    networks:
      - confluent

  spark-master:
    build: ./spark
    container_name: spark-master
    environment:
      SPARK_MODE: master
      SPARK_MASTER_HOST: spark-master
      PYSPARK_PYTHON: /opt/bitnami/python/bin/python3
    ports:
      - '7077:7077'
      - '8080:8080'
    networks:
      - confluent

  spark-worker:
    build: ./spark
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      PYSPARK_PYTHON: /opt/bitnami/python/bin/python3
    ports:
      - '8083:8081'
    networks:
      - confluent

  spark-job:
    build: ./spark
    container_name: spark-job
    depends_on:
      - broker
      - spark-master
      - cassandra
    volumes:
      - ./spark:/opt/app
    command: ["/bin/bash", "/opt/app/launch_and_run.sh"]
    environment:
      PYSPARK_PYTHON: /opt/bitnami/python/bin/python3
      PYSPARK_DRIVER_PYTHON: /opt/bitnami/python/bin/python3
      HADOOP_USER_NAME: spark
      JAVA_TOOL_OPTIONS: -Duser.name=spark -Duser.home=/tmp
    networks:
      - confluent

  airflow:
    image: apache/airflow:2.6.3
    container_name: airflow
    command: ["bash", "-lc", "airflow standalone"]
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./dags:/opt/airflow/dags
    ports:
      - '8082:8080'
    depends_on:
      - broker
    networks:
      - confluent

  producer:
    image: python:3.11-slim
    container_name: producer
    volumes:
      - ./:/opt/app
    working_dir: /opt/app
    command: ["bash", "-lc", "pip install --no-cache-dir kafka-python requests && python producer/producer.py"]
    depends_on:
      - broker
    networks:
      - confluent

  tester:
    image: python:3.11-slim
    container_name: tester
    depends_on:
      - broker
      - cassandra
    volumes:
      - ./:/opt/app
    working_dir: /opt/app
    entrypoint: ["/bin/bash", "/opt/app/scripts/verify_end_to_end.sh"]
    networks:
      - confluent

networks:
  confluent:
